viewprojects.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Project Viewer</title>
    <link rel="stylesheet" type="text/css" href="viewprojects.css">
    <link href="https://fonts.googleapis.com/css2?family=Lato&display=swap" rel="stylesheet">
    <link href="https://use.fontawesome.com/releases/v5.6.1/css/all.css" rel="stylesheet">
</head>
<body>
    <input type="checkbox" id="check">
    <label for="check">
      <i class="fas fa-bars" id="btn" title="Menu"></i>
      <i class="fas fa-times" id="cancel" title="Close"></i>
    </label>
    <div class="sidebar">
      <header>Menu</header>
      <a href="viewprojects.html" class="active"><i class="fas fa-qrcode"></i><span>Dashboard</span></a>
      <a href="about.html"><i class="far fa-question-circle"></i><span>About</span> </a>
      <a href="signup.html"><i class="fas fa-key"></i><span>Password</span>  </a>
      <a href="login.html"><i class="fas fa-sign-out-alt"></i><span>Signout</span> </a>
    </div>
    <div class="header">
        <div class="header-left">
            <h1>ProjectPilot</h1>
        </div>
        <div class="header-right">
            <button id="generate-ff180" class="button-blue">Generate ff180</button>
            <button id="add-project-button" class="button-green">Edit Project</button>
            <button id="delete-project-button" class="button-red">Delete Project</button>
        </div>
    </div>

    <div class="view-container">
        <div class="project-description">
            <div class="description-section">
                <h2 id="project-title" style="color:#1a681c"></h2> <!-- Placeholder for project title -->
                <p id="project-description"></p> <!-- Placeholder for project description -->
            </div>
            <br>
            <hr>
            <br>
            <div class="recent-activity-section">
              <br>
                <h2 style="color:#1a681c">Recent Activity</h2>
                <div id="activity-list">
                    <!-- Activities will be added here dynamically -->
                </div>
                <a href="#" class="link-blue">See more</a>
                <br>
            </div>
        </div>
        
        <div class="project-status">
            <div class="status-icons">
                <!-- Icons will be added here dynamically --> 
            </div>
            <div class="status-info">
                <div class="status-node" id="start-date"></div> 
    <div class="status-node" id="deadline"></div> 
    <div class="status-node" id="project-guide"></div> 
    <div class="status-node" id="project-leader"></div> 
    <div class="status-node" id="task-progress"></div> 
    <div class="status-node" id="project-progress"></div> 
    <div class="member-grid" id="member1"></div> 
    <div class="member-grid" id="member2"></div> 
    <div class="status-node" id="member3"></div> 
    <div class="status-node" id="member4"></div> 
    <div class="status-node" id="member5"></div> 
    
                    
                        <!-- <div id="member-list" class="member-grid">
                            </div> -->
                   
                </div>
            </div>
        </div>
    </div>

    <div id="project-form" style="display: none;">
        <h2>New Project</h2>
        <form id="add-project-form">
            <label for="project-title">Project Title:</label>
            <input type="text" id="project-title" name="project-title"><br>

            <label for="project-description">Description:</label>
            <textarea id="project-description" name="project-description"></textarea><br>

            <label for="project-Startdate">Start Date:</label>
            <input type="date" id="project-Startdate" name="project-Startdate"><br><br>

            <!-- New container for the number of members label and dropdown list -->
            <div class="num-members-container">
                <label for="num-members">Number of Members:</label>
                <select id="num-members" name="num-members">
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                    <option value="5">5</option>
                    <option value="6">6</option>
                    <option value="7">7</option>
                    <option value="8">8</option>
                    <option value="9">9</option>
                    <option value="10">10</option>
                </select>
            </div><br><br>

            <!-- New label and input box to add members -->
            <label for="add-members">Add Members:</label>
            <input type="text" id="add-members" name="add-members">
            <!-- + button with the addButton class -->
            <button type="button" class="addButton" onclick="addMember()">+</button><br><br><br>

            <!-- New section for Project Guide and Project Leader -->
            <label for="project-guide">Project Guide:</label>
            <input type="text" id="project-guide" name="project-guide"><br>

            <label for="project-leader">Project Leader:</label>
            <input type="text" id="project-leader" name="project-leader"><br>

            <!-- New section for adding project tasks -->
            <h3>Add Project Tasks</h3>

            <!-- Task container for task input and + button -->
            <div class="task-container">
                <label for="add-task">Task:</label>
                <input type="text" id="add-task" name="add-task">
                <button type="button" class="addButton" onclick="addTask()">+</button>
            </div>

            <!-- Task list to display added tasks -->
            <ul id="task-list"></ul>

            <button type="submit">Add Project</button>
        </form>
    </div>
    <script src="viewprojects.js"></script> 
</body>
</html>

viewprojects.js
document.addEventListener('DOMContentLoaded', function () {
    const urlParams = new URLSearchParams(window.location.search);
    const projectId = urlParams.get('id');

    fetchProjectData(projectId);

    // Function to fetch and display project data
    function fetchProjectData(id) {
        fetch(`getproject.php?id=${id}`)
            .then(response => response.json())
            .then(projectData => {
                displayProjectData(projectData);
            })
            .catch(error => console.error('Error:', error));
    }

    // Function to display project data in the HTML
    function displayProjectData(project) {
        // Project details
        document.getElementById('project-title').textContent = project.title;
        document.getElementById('project-description').textContent = project.description;
        document.getElementById('start-date').textContent = `Start Date: ${project.start_date}`; 
        document.getElementById('deadline').textContent = `Deadline: ${project.deadline}`; // Assuming you have a deadline field 
        document.getElementById('project-guide').textContent = `Project Guide: ${project.guide}`;
        document.getElementById('project-leader').textContent = `Project Leader: ${project.leader}`;

        // Additional project details
        document.getElementById('member1').textContent = `Member 1: ${project.member1}`;
        document.getElementById('member2').textContent = `Member 2: ${project.member2}`;
        document.getElementById('member3').textContent = `Member 3: ${project.member3}`;
        document.getElementById('member4').textContent = `Member 4: ${project.member4}`;
        document.getElementById('member5').textContent = `Member 5: ${project.member5}`;
        

        // ... (Similarly for other members, deadline, etc.) ...

        // Members display using a grid layout (example)
        const memberList = document.getElementById('member-list');
        memberList.innerHTML = ''; // Clear previous members
        for (let i = 1; i <= 5; i++) { // Assuming up to 5 members
            const member = project[`member${i}`];
            if (member) {
                const memberDiv = document.createElement('div');
                memberDiv.textContent = member;
                memberList.appendChild(memberDiv);
            }
        }

        // Task progress
        const totalTasks = project.tasks.length;
        const completedTasks = project.tasks.filter(task => task.completed).length; // Assuming tasks have a 'completed' property
        document.getElementById('task-progress').textContent = `Tasks: ${completedTasks} of ${totalTasks} Completed`;

        // Project progress (example calculation based on tasks)
        const progressPercentage = Math.round((completedTasks / totalTasks) * 100);
        document.getElementById('project-progress').textContent = `Progress: ${progressPercentage}%`;

        // Recent activities
        const activityList = document.getElementById('activity-list');
        activityList.innerHTML = ''; 
        project.activities.forEach(activity => {
            const listItem = document.createElement('li');
            listItem.textContent = activity;
            activityList.appendChild(listItem);
        });
    }

    // ... (Existing code for fetching project ID and data remains the same) ...

    const projectForm = document.querySelector('#project-form');
    const addProjectForm = document.querySelector('#add-project-form');
    const taskList = document.getElementById('task-list');

    // Function to open the project form
    function openProjectForm() {
        projectForm.style.display = 'block';
        // ... (Styling for project form position, padding, etc.) ...
    }

    // Function to close the project form
    function closeProjectForm() {
        projectForm.style.display = 'none';
    }

    // Add event listener for the "Add Project" button
    const addProjectButton = document.querySelector('#add-project-button');
    addProjectButton.addEventListener('click', openProjectForm);

    // Function to add a new task to the task list
    function addTask() {
        const taskInput = document.getElementById('add-task');
        const taskText = taskInput.value.trim();
        if (taskText !== '') {
            const listItem = document.createElement('li');
            listItem.textContent = taskText;
            taskList.appendChild(listItem);
            taskInput.value = ''; // Clear the input field
        }
    }
    
    // Add event listener for project form submission
    addProjectForm.addEventListener('submit', (event) => {
        event.preventDefault();

        // Get form data
        // ... (Get project title, start date, members, guide, leader as before) ...
        const tasks = Array.from(document.querySelectorAll('#task-list li')).map(item => item.textContent);

        // Create a new project object
        const newProject = {
            // ... (Set project properties as before) ...
            tasks: tasks,
        };

        // Send project data to the server (using fetch or XMLHttpRequest)
        // ... (Implement logic to send data to addproject.php) ...

        // Handle successful project creation (e.g., display success message, update project list)
        // ... (Implement logic to handle successful response from server) ...
    });

    function deleteProject(projectId) {
        if (confirm("Are you sure you want to delete this project?")) {
            // Send delete request to the server
            fetch(`deleteproject.php?id=${projectId}`)
                .then(response => response.text())
                .then(message => {
                    // Handle success message
                    console.log(message);
                    // Redirect to myprojects.html
                    window.location.href = "myprojects.html";
                })
                .catch(error => console.error('Error:', error));
        }
    }

    // Add event listener for the "Delete Project" button
    const deleteProjectButton = document.querySelector('#delete-project-button');
    deleteProjectButton.addEventListener('click', function () {
        deleteProject(projectId);
    });

    const generateff180 = document.getElementById("#generate-ff180");
    generateff180.addEventListener("click", function() {
        window.location.href = "ff180.html";
    });
});

editproject.php
<?php
include 'db.php';

// Assuming data is sent as JSON
$data = json_decode(file_get_contents('php://input'), true);

// Extract data from JSON
$projectId = $data['projectId'];
$title = $data['project-title'];
$description = $data['project-description'];
$startDate = $data['project-Startdate'];
$guide = $data['project-guide'];
$leader = $data['project-leader'];
$progress = $data['project-progress'];
$deadline = $data['deadline'];
$member1 = $data['member1'];
$member2 = $data['member2'];
$member3 = $data['member3'];
$member4 = $data['member4'];
$member5 = $data['member5'];
$tasks = json_encode($data['tasks']); // Convert tasks array to JSON string

// Prepare and bind parameters for UPDATE statement
$stmt = $conn->prepare("UPDATE projects SET title = ?, description = ?, start_date = ?, guide = ?, leader = ?, progress = ?, deadline = ?, member1 = ?, member2 = ?, member3 = ?, member4 = ?, member5 = ?, tasks = ? WHERE id = ?");
$stmt->bind_param("sssssssssssssi", $title, $description, $startDate, $guide, $leader, $progress, $deadline, $member1, $member2, $member3, $member4, $member5, $tasks, $projectId);

if ($stmt->execute()) {
    echo json_encode(array("message" => "Project updated successfully"));
} else {
    echo json_encode(array("error" => "Error updating project: " . $stmt->error));
}

$stmt->close();
$conn->close();
?>


deleteproject.php
<?php
include 'db.php';

if (isset($_GET['id'])) {
    $projectId = $_GET['id'];
    
    // Prepare and bind parameters for DELETE statement
    $stmt = $conn->prepare("DELETE FROM projects WHERE id = ?");
    $stmt->bind_param("i", $projectId);

    if ($stmt->execute()) {
        echo "Project deleted successfully";
    } else {
        echo "Error deleting project: " . $stmt->error;
    }

    $stmt->close();
} 

$conn->close(); 
?>

